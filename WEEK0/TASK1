This document summarizes what we learned in the first lecture about designing a System-on-Chip (SoC). Think of it as a three-step journey to turn a design idea into a physical chip.

Phase 1: Planning and High-Level Design
Before building anything, we start with a high-level plan. We use the C programming language to create a simple, working model of the chip. This is like drawing a detailed blueprint to make sure our plan works before we start the actual construction.

Phase 2: Building with Code
This is where we turn our plan into hardware code.
    • RTL (Register-Transfer Level): We use a special language called Verilog to describe the hardware. This is the "soft copy" of our chip.
    • Breaking it Down: We divide our design into three key parts:
        1. The main processor (the "brain" of the chip that does all the heavy thinking).
        2. Smaller helper parts called peripherals (these help the main processor do specific tasks, like communicating with other devices).
        3. Pre-made pieces called macros (these are pre-designed blocks, like a memory block, that we can just plug into our design).

Phase 3: The Final Assembly
Finally, we put all the pieces together and prepare the design for manufacturing.
    • Putting it all together: We assemble the processor, peripherals, and macros into one complete design.
    • Physical Checks: We do a bunch of checks to make sure everything is in the right place, like floorplanning (placing parts on the chip) and routing (connecting them with wires).
    • The Blueprint: The end result is a special file called a GDS II file. This is the final blueprint that is sent to the factory to create the actual chip.
